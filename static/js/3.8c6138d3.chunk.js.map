{"version":3,"sources":["components/profile/profile.module.css","components/profile/myposts/myposts.module.css","components/post/post.module.css","photo.jpg","components/profile/ProfileInfo/ProfileStatus.jsx","components/profile/ProfileInfo/ProfileInfo.jsx","components/post/post.jsx","components/profile/myposts/myposts.jsx","components/profile/myposts/myPostsContainer.jsx","components/profile/profile.jsx","components/profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatus","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","className","src","photos","large","avatar","alt","fullName","aboutMe","href","contacts","facebook","vk","Preloader","Post","message","classes","wrapper","photo","MyPosts","React","memo","postsElements","posts","map","p","id","key","likesCounts","post_item","maxLength","MaxLengthCreator","NewPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","validate","requiredField","Areal","placeholder","btn","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","Component","compose","auth","isAuth","withRouter"],"mappings":"qFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,+B,oBCAnED,EAAOC,QAAU,CAAC,QAAU,yBAAyB,IAAM,uB,oBCA3DD,EAAOC,QAAU,CAAC,QAAU,wB,oBCD5BD,EAAOC,QAAU,IAA0B,mC,yJCoC5BC,EAjCO,SAACC,GAAW,IAAD,EACCC,oBAAS,GADV,mBACxBC,EADwB,KACdC,EADc,OAEHF,mBAASD,EAAMI,QAFZ,mBAExBA,EAFwB,KAEhBC,EAFgB,KAiB7B,OAHAC,qBAAU,WACND,EAAUL,EAAMI,UACjB,CAACJ,EAAMI,SAEN,8BACMF,GACE,6BACI,0BAAMK,cAjBC,WACnBJ,GAAY,KAgBwCH,EAAMI,QAAU,QAG/DF,GACG,6BACI,2BAAOM,SAfvB,SAAwBC,GACpBJ,EAAUI,EAAEC,cAAcC,QAcmBC,WAAW,EAAMC,OAnBzC,WACrBV,GAAY,GACZH,EAAMc,aAAaV,IAiBuEO,MAAOP,OCH1FW,EArBK,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,QAASZ,EAA2B,EAA3BA,OAAQU,EAAmB,EAAnBA,aACtC,OAAKE,EAIH,yBAAKC,UAAU,eACb,yBAAKC,IAA6B,MAAxBF,EAAQG,OAAOC,MAAgBJ,EAAQG,OAAOC,MAAQC,IAAQJ,UAAU,kBAAkBK,IAAI,MACxG,6BACE,4BAAKN,EAAQO,UACb,kBAAC,EAAD,CAAenB,OAAQA,EAAQU,aAAcA,IAC7C,6BACE,4BACE,yCAAeE,EAAQQ,SACvB,yCAAc,uBAAGC,KAAMT,EAAQU,SAASC,UAAWX,EAAQU,SAASC,WACpE,mCAAQ,uBAAGF,KAAMT,EAAQU,SAASE,IAA1B,IAAgCZ,EAAQU,SAASE,SAZ1D,kBAACC,EAAA,EAAD,O,8DCKIC,EARF,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACZ,OACI,yBAAKd,UAAWe,IAAQC,SACpB,yBAAKf,IAAKgB,IAAOZ,IAAI,SACpBS,I,kCCiCEI,EAlCCC,IAAMC,MAAK,SAACrC,GAC1B,IAAIsC,EAAgBtC,EAAMuC,MAAMC,KAAI,SAAAC,GAAC,OACnC,kBAAC,EAAD,CAAMV,QAASU,EAAEV,QAASW,GAAID,EAAEC,GAAIC,IAAKF,EAAEC,GAAIE,YAAaH,EAAEG,YAAa3B,UAAWe,IAAQa,eAO1FC,EAAYC,YAAiB,IAW7BC,EAAmBC,YAAU,CAAEC,KAAM,eAAlBD,EAVL,SAACjD,GACnB,OACE,0BAAMmD,SAAUnD,EAAMoD,cACpB,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,KAAM,cAAeC,SAAU,CAACC,IAAeZ,GACzE7B,UAAWe,IAAQ2B,MAAOC,YAAY,qBACxC,6BACA,4BAAQ3C,UAAWe,IAAQ6B,KAA3B,gBAMN,OACE,yBAAK5C,UAAWe,IAAQC,SACtB,6BACE,wCADF,IACoB,6BAClB,kBAACe,EAAD,CAAkBG,SArBR,SAACW,GACf9D,EAAM+D,QAAQD,EAAOE,iBAsBnB,yBAAK/C,UAAWe,IAAQO,OACrBD,O,QCjBM2B,EAFUC,aAZH,SAACC,GACrB,MAAO,CACL5B,MAAO4B,EAAMC,YAAY7B,UAGJ,SAAC8B,GACxB,MAAO,CACLN,QAAS,SAACC,GACRK,EAASC,YAAqBN,QAIXE,CAA6C/B,GCLvDoC,EARC,SAACvE,GACb,OACI,yBAAKiB,UAAWe,IAAQC,SACpB,kBAAC,EAAD,CAAajB,QAAShB,EAAMgB,QAASZ,OAAQJ,EAAMI,OAAQU,aAAcd,EAAMc,eAC/E,kBAAC,EAAD,Q,eCDN0D,E,0LACgBxE,GACd,IAAIyE,EAASC,KAAK1E,MAAM2E,MAAMC,OAAOH,OAChCA,IACDA,EAASC,KAAK1E,MAAM6E,mBACLH,KAAK1E,MAAM8E,QAAQC,KAAK,UAE3CL,KAAK1E,MAAMgF,eAAeP,GAC1BC,KAAK1E,MAAMiF,UAAUR,K,+BAGrB,OACI,kBAAC,EAAD,iBAAaC,KAAK1E,MAAlB,CAAyBgB,QAAS0D,KAAK1E,MAAMgB,QAASZ,OAAQsE,KAAK1E,MAAMI,OAAQU,aAAc4D,KAAK1E,MAAMc,oB,GAZvFsB,IAAM8C,WAuBtBC,sBACXjB,aAPoB,SAACC,GAAD,MAAY,CAChCnD,QAASmD,EAAMC,YAAYpD,QAC3BZ,OAAQ+D,EAAMC,YAAYhE,OAC1ByE,iBAAkBV,EAAMiB,KAAKX,OAC7BY,OAAQlB,EAAMiB,KAAKC,UAGM,CACrBL,mBAAgBC,cAChBnE,mBAEJwE,IALWH,CAMbX","file":"static/js/3.8c6138d3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"profile_wrapper__1UlB1\",\"profileInfo\":\"profile_profileInfo__14Mlr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"myposts_wrapper__3VHtp\",\"btn\":\"myposts_btn__2WT-U\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"post_wrapper__39QNH\"};","module.exports = __webpack_public_path__ + \"static/media/photo.c33dc959.jpg\";","import React, { useState, useEffect } from 'react';\n\n\nconst ProfileStatus = (props) => {\n    let [editMode, setEditMode] = useState(false);\n    let [status, setStatus] = useState(props.status);\n\n    let activateEditMode = () => {\n        setEditMode(true);\n    }\n    let deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateStatus(status);\n    }\n    function onStatusChange(e) {\n        setStatus(e.currentTarget.value);\n    }\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status]);\n    return (\n        <div>\n            {!editMode &&\n                <div>\n                    <span onDoubleClick={activateEditMode}>{props.status || \"---\"}</span>\n                </div>\n            }\n            {editMode &&\n                <div>\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status} />\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default ProfileStatus;","import React from \"react\";\nimport avatar from '../../../avatar.png';\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport ProfileStatus from \"./ProfileStatus\";\n\nconst ProfileInfo = ({ profile, status, updateStatus }) => {\n  if (!profile) {\n    return <Preloader />\n  }\n  return (\n    <div className='profileInfo'>\n      <img src={profile.photos.large != null ? profile.photos.large : avatar} className='profileInfo-Img' alt=\"#\" />\n      <div>\n        <h3>{profile.fullName}</h3>\n        <ProfileStatus status={status} updateStatus={updateStatus} />\n        <div>\n          <ul>\n            <li>About me: {profile.aboutMe}</li>\n            <li>Facebook: <a href={profile.contacts.facebook}>{profile.contacts.facebook}</a></li>\n            <li>Vk: <a href={profile.contacts.vk}> {profile.contacts.vk}</a></li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default ProfileInfo;","import React from 'react';\nimport classes from './post.module.css'\nimport photo from '../../photo.jpg'\n\nconst Post = ({ message }) => {\n    return (\n        <div className={classes.wrapper}>\n            <img src={photo} alt=\"logo\" />\n            {message}\n        </div>\n    )\n}\nexport default Post;","import React from 'react';\nimport classes from './myposts.module.css'\nimport Post from '../../post/post'\nimport { reduxForm, Field } from 'redux-form';\nimport { requiredField, MaxLengthCreator } from '../../../validators/validators';\nimport { Textarea } from '../../common/FormControls/FormControls';\n\nconst MyPosts = React.memo((props) => {\n  let postsElements = props.posts.map(p => (\n    <Post message={p.message} id={p.id} key={p.id} likesCounts={p.likesCounts} className={classes.post_item} /> // Component to all posts\n  ));\n\n  const addPost = (values) => {\n    props.addPost(values.newPostText)\n  }\n\n  const maxLength = MaxLengthCreator(30);\n  const NewPostForm = (props) => {\n    return (\n      <form onSubmit={props.handleSubmit}>\n        <Field component={Textarea} name={\"newPostText\"} validate={[requiredField, maxLength]}\n          className={classes.Areal} placeholder='Start writing...' />\n        <br />\n        <button className={classes.btn}>Add Post</button>\n      </form>\n    );\n  }\n  const NewPostReduxForm = reduxForm({ form: 'newPostText' })(NewPostForm);\n\n  return (\n    <div className={classes.wrapper}>\n      <div>\n        <h3>My posts</h3> <br />\n        <NewPostReduxForm onSubmit={addPost} />\n      </div>\n      <div className={classes.posts}>\n        {postsElements}\n      </div>\n    </div>\n  );\n})\nexport default MyPosts;","import React from 'react';\nimport { addPostActionCreator } from \"../../../redux/profile-reducer\";\nimport MyPosts from \"./myposts\";\nimport { connect } from 'react-redux';\n\nlet mapStateToProps = (state) => {\n  return {\n    posts: state.profilePage.posts\n  }\n};\nlet mapDispatchToProps = (dispatch) => {\n  return {\n    addPost: (newPostText) => {\n      dispatch(addPostActionCreator(newPostText));\n    }\n  }\n};\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\n\nexport default MyPostsContainer;","import React from 'react';\nimport classes from './profile.module.css';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\nimport MyPostsContainer from './myposts/myPostsContainer';\nconst Profile = (props) => {\n    return (\n        <div className={classes.wrapper}>\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus} />\n            <MyPostsContainer />\n        </div>\n    )\n}\nexport default Profile;","import React from 'react';\nimport Profile from './profile';\nimport { connect } from 'react-redux';\nimport { getUserProfile, getStatus, updateStatus } from \"../../redux/profile-reducer\";\nimport { withRouter } from 'react-router-dom';\nimport { compose } from \"redux\";\n\nclass ProfileContainer extends React.Component {\n    componentDidMount(props) {\n        let userId = this.props.match.params.userId;\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n            if (!userId) { this.props.history.push('/login') }\n        }\n        this.props.getUserProfile(userId);\n        this.props.getStatus(userId);\n    }\n    render() {\n        return (\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus} />\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth\n})\nexport default compose(\n    connect(mapStateToProps, {\n        getUserProfile, getStatus,\n        updateStatus\n    }),\n    withRouter\n)(ProfileContainer);\n"],"sourceRoot":""}