{"ast":null,"code":"var _jsxFileName = \"/Users/danilkonovalov/Documents/GitHub/react-social-network/src/components/newUsers/NewUsersContainer.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { followAC, unfollowAC, setUsersAC, setCurrentPageAC, setUsersTotalCountAC, togleIsFetchingAC } from '../../redux/users-reducer';\nimport Axios from 'axios';\nimport Users from './Users';\nimport Preloader from '../common/Preloader/Preloader';\n\nclass NewUsersContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onPageChanged = pageNumber => {\n      this.props.togleIsFetching(true);\n      this.props.setCurrentPage(pageNumber);\n      Axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`).then(Response => {\n        this.props.togleIsFetching(false);\n        this.props.setUsers(Response.data.items);\n      });\n    };\n  }\n\n  componentDidMount(props) {\n    this.props.togleIsFetching(true);\n    Axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`).then(Response => {\n      this.props.setUsers(Response.data.items);\n      this.props.setUsersTotalCount(Math.ceil(Response.data.totalCount / 10));\n      this.props.togleIsFetching(false);\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, this.props.isFetching ? React.createElement(Preloader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }) : null, React.createElement(Users, {\n      onPageChanged: this.onPageChanged,\n      currentPage: this.props.currentPage,\n      pageSize: this.props.pageSize,\n      totalCount: this.props.totalCount,\n      users: this.props.users,\n      follow: this.props.follow,\n      unfollow: this.props.unfollow,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    users: state.usersPage.users,\n    pageSize: state.usersPage.pageSize,\n    totalCount: state.usersPage.totalCount,\n    currentPage: state.usersPage.currentPage,\n    isFetching: state.usersPage.isFetching\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    follow: userId => {\n      dispatch(followAC(userId));\n    },\n    unfollow: userId => {\n      dispatch(unfollowAC(userId));\n    },\n    setUsers: users => {\n      dispatch(setUsersAC(users));\n    },\n    setCurrentPage: currentPage => {\n      dispatch(setCurrentPageAC(currentPage));\n    },\n    setUsersTotalCount: totalCount => {\n      dispatch(setUsersTotalCountAC(totalCount));\n    },\n    togleIsFetching: isFetching => {\n      dispatch(togleIsFetchingAC(isFetching));\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewUsersContainer);","map":{"version":3,"sources":["/Users/danilkonovalov/Documents/GitHub/react-social-network/src/components/newUsers/NewUsersContainer.jsx"],"names":["React","connect","followAC","unfollowAC","setUsersAC","setCurrentPageAC","setUsersTotalCountAC","togleIsFetchingAC","Axios","Users","Preloader","NewUsersContainer","Component","onPageChanged","pageNumber","props","togleIsFetching","setCurrentPage","get","pageSize","then","Response","setUsers","data","items","componentDidMount","currentPage","setUsersTotalCount","Math","ceil","totalCount","render","isFetching","users","follow","unfollow","mapStateToProps","state","usersPage","mapDispatchToProps","dispatch","userId"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { followAC, unfollowAC, setUsersAC, setCurrentPageAC, setUsersTotalCountAC, togleIsFetchingAC } from '../../redux/users-reducer';\nimport Axios from 'axios';\nimport Users from './Users';\nimport Preloader from '../common/Preloader/Preloader';\nclass NewUsersContainer extends React.Component {\n\n    componentDidMount(props) {\n        this.props.togleIsFetching(true);\n        Axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`).then(Response => {\n            this.props.setUsers(Response.data.items);\n            this.props.setUsersTotalCount(Math.ceil(Response.data.totalCount / 10));\n            this.props.togleIsFetching(false);\n        })\n    }\n    onPageChanged = (pageNumber) => {\n        this.props.togleIsFetching(true);\n        this.props.setCurrentPage(pageNumber);\n        Axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.pageSize}`).then(Response => {\n            this.props.togleIsFetching(false);\n            this.props.setUsers(Response.data.items);\n\n        })\n    }\n    render() {\n        return <>\n            {this.props.isFetching ? <Preloader /> : null }\n        <Users onPageChanged={this.onPageChanged}\n            currentPage={this.props.currentPage}\n            pageSize={this.props.pageSize}\n            totalCount={this.props.totalCount}\n            users={this.props.users}\n            follow={this.props.follow}\n            unfollow={this.props.unfollow} />\n            </>\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        users: state.usersPage.users,\n        pageSize: state.usersPage.pageSize,\n        totalCount: state.usersPage.totalCount,\n        currentPage: state.usersPage.currentPage,\n        isFetching: state.usersPage.isFetching\n    }\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        follow: (userId) => {\n            dispatch(followAC(userId))\n        },\n        unfollow: (userId) => {\n            dispatch(unfollowAC(userId))\n        },\n        setUsers: (users) => {\n            dispatch(setUsersAC(users));\n        },\n        setCurrentPage: (currentPage) => {\n            dispatch(setCurrentPageAC(currentPage));\n        },\n        setUsersTotalCount: (totalCount) => {\n            dispatch(setUsersTotalCountAC(totalCount));\n        },\n        togleIsFetching: (isFetching) => {\n            dispatch(togleIsFetchingAC(isFetching))\n        }\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(NewUsersContainer);"]},"metadata":{},"sourceType":"module"}