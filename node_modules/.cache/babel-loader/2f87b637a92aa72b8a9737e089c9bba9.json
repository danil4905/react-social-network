{"ast":null,"code":"const ADD_POST = 'ADD-POST';\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\nconst SEND_MESSAGE = 'SEND-MESSAGE';\nconst UPDATE_NEW_MESSAGE_BODY = 'UPDATE-NEW-MESSAGE-BODY';\nlet store = {\n  _state: {\n    profilePage: {\n      posts: [{\n        id: 1,\n        message: \"Hello buddy!\",\n        likesCounts: 12\n      }, {\n        id: 2,\n        message: \"What is your name?\",\n        likesCounts: 12\n      }],\n      newPostText: \"Hello\"\n    },\n    messagesPage: {\n      dialogs: [{\n        id: 1,\n        name: \"Natalya\"\n      }, {\n        id: 2,\n        name: \"Rudick\"\n      }, {\n        id: 3,\n        name: \"Denis\"\n      }, {\n        id: 4,\n        name: \"David\"\n      }, {\n        id: 5,\n        name: \"Rojer\"\n      }, {\n        id: 6,\n        name: \"Max\"\n      }],\n      messages: [{\n        id: 1,\n        message: \"Yo!\"\n      }, {\n        id: 2,\n        message: \"Hello my friend\"\n      }, {\n        id: 3,\n        message: \"How are you?\"\n      }, {\n        id: 4,\n        message: \"I am Ok\"\n      }],\n      newMessageBody: ''\n    }\n  },\n\n  _callSubscriber() {\n    console.log(\"State changed\");\n  },\n\n  getState() {\n    return this._state;\n  },\n\n  subscribe(observer) {\n    this._callSubscriber = observer;\n  },\n\n  dispatch(action) {\n    if (action.type === ADD_POST) {\n      let newPost = {\n        id: 3,\n        message: this._state.profilePage.newPostText,\n        likesCount: 0\n      };\n\n      this._state.profilePage.posts.push(newPost);\n\n      this._state.profilePage.newPostText = \"\";\n\n      this._callSubscriber(store);\n    } else if (action.type === UPDATE_NEW_POST_TEXT) {\n      this._state.profilePage.newPostText = action.newText;\n\n      this._callSubscriber(this._state);\n    } else if (action.type === SEND_MESSAGE) {\n      let body = this._state.messagesPage.newMessageBody;\n\n      this._state.messagesPage.messages.push({\n        id: 6,\n        message: body\n      });\n\n      this._state.messagesPage.newMessageBody = '';\n      this.subscribe(this._state);\n    } else if (action.type === UPDATE_NEW_MESSAGE_BODY) {\n      this._state.messagesPage.newMessageBody = action.body;\n      this.subscribe(this._state);\n    }\n  }\n\n};\nexport const addPostActionCreator = () => ({\n  type: ADD_POST\n});\nexport const updateNewPostTextActionCreator = text => ({\n  type: UPDATE_NEW_POST_TEXT,\n  newText: text\n});\nexport const sendMessageCreator = () => ({\n  type: SEND_MESSAGE\n});\nexport const updateNewMessageBodyCreator = body => ({\n  type: UPDATE_NEW_MESSAGE_BODY,\n  body: body\n});\nexport default store;\nwindow.store = store; // file with Data","map":{"version":3,"sources":["/Users/danilkonovalov/Documents/GitHub/react-social-network/src/redux/state.js"],"names":["ADD_POST","UPDATE_NEW_POST_TEXT","SEND_MESSAGE","UPDATE_NEW_MESSAGE_BODY","store","_state","profilePage","posts","id","message","likesCounts","newPostText","messagesPage","dialogs","name","messages","newMessageBody","_callSubscriber","console","log","getState","subscribe","observer","dispatch","action","type","newPost","likesCount","push","newText","body","addPostActionCreator","updateNewPostTextActionCreator","text","sendMessageCreator","updateNewMessageBodyCreator","window"],"mappings":"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","sourcesContent":["const ADD_POST = 'ADD-POST';\nconst UPDATE_NEW_POST_TEXT = 'UPDATE-NEW-POST-TEXT';\nconst SEND_MESSAGE = 'SEND-MESSAGE';\nconst UPDATE_NEW_MESSAGE_BODY = 'UPDATE-NEW-MESSAGE-BODY';\n\nlet store = {\n  _state: {\n    profilePage: {\n      posts: [\n        { id: 1, message: \"Hello buddy!\", likesCounts: 12 },\n        { id: 2, message: \"What is your name?\", likesCounts: 12 }\n      ],\n      newPostText: \"Hello\"\n    },\n    messagesPage: {\n      dialogs: [\n        { id: 1, name: \"Natalya\" },\n        { id: 2, name: \"Rudick\" },\n        { id: 3, name: \"Denis\" },\n        { id: 4, name: \"David\" },\n        { id: 5, name: \"Rojer\" },\n        { id: 6, name: \"Max\" }\n      ],\n      messages: [\n        { id: 1, message: \"Yo!\" },\n        { id: 2, message: \"Hello my friend\" },\n        { id: 3, message: \"How are you?\" },\n        { id: 4, message: \"I am Ok\" }\n      ],\n      newMessageBody: ''\n    }\n  },\n  _callSubscriber() {\n    console.log(\"State changed\");\n  },\n\n  getState() {\n    return this._state;\n  },\n  subscribe(observer) {\n    this._callSubscriber = observer;\n  },\n\n  dispatch(action) {\n    if (action.type === ADD_POST) {\n      let newPost = {\n        id: 3,\n        message: this._state.profilePage.newPostText,\n        likesCount: 0\n      };\n      this._state.profilePage.posts.push(newPost);\n      this._state.profilePage.newPostText = \"\";\n      this._callSubscriber(store);\n    } else if (action.type === UPDATE_NEW_POST_TEXT) {\n      this._state.profilePage.newPostText = action.newText;\n      this._callSubscriber(this._state);\n    } else if (action.type === SEND_MESSAGE) {\n      let body = this._state.messagesPage.newMessageBody;\n      this._state.messagesPage.messages.push ({id: 6, message: body});\n      this._state.messagesPage.newMessageBody = '';\n      this.subscribe(this._state);\n    } else if (action.type === UPDATE_NEW_MESSAGE_BODY) {\n      this._state.messagesPage.newMessageBody = action.body;\n      this.subscribe(this._state);\n    }\n  }\n};\nexport const addPostActionCreator = () =>({ type: ADD_POST });\n\nexport const updateNewPostTextActionCreator = text => (\n  {type: UPDATE_NEW_POST_TEXT,\n    newText: text\n  });\nexport const sendMessageCreator = () => ({ type: SEND_MESSAGE });\n\nexport const updateNewMessageBodyCreator = body => ({\n    type: UPDATE_NEW_MESSAGE_BODY,\n    body: body\n  });\nexport default store;\nwindow.store = store;\n// file with Data\n"]},"metadata":{},"sourceType":"module"}